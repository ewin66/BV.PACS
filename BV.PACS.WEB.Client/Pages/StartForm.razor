@inject HttpClient Http
@inject LookupService ApiService
@using System.Collections
@using BV.PACS.WEB.Client.Services.Api
@using BV.PACS.WEB.Shared.Models
@using BV.PACS.WEB.Shared.Models.Parameters
@using BV.PACS.WEB.Shared.Utils
@using Microsoft.AspNetCore.Components
@using BV.PACS.WEB.Client.Pages.BatchRegistration
@inherits BV.PACS.WEB.Client.Shared.Base.TranslatablePanel<BV.PACS.WEB.Client.I18nText.StartForm>
<h1>@Translations.Caption</h1>

<div class="row alert alert-primary background-white">
    <div class="col-sm-12">
        @*<DxFormLayout CaptionPosition=@CaptionPosition.Vertical>
            <DxFormLayoutItem Caption="Location:" ColSpanLg="4" ColSpanMd="12">
                <Template>
                    <DxTextBox @bind-Text=@Location></DxTextBox>
                </Template>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Check in:" ColSpanLg="4" ColSpanMd="6">
                <Template>
                    <DxDateEdit @bind-Date=@CheckIn></DxDateEdit>
                </Template>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Check out:" ColSpanLg="4" ColSpanMd="6">
                <Template>
                    <DxDateEdit @bind-Date=@CheckOut></DxDateEdit>
                </Template>
            </DxFormLayoutItem>
        </DxFormLayout>


        <span class="oi oi-pencil mr-2" aria-hidden="true"></span>
        <DxTreeView AllowSelectNodes="true"
                    SelectionChanged=@SelectionChanged>
            <Nodes>
                <DxTreeViewNode Text="Metals">
                    <Nodes>
                        <DxTreeViewNode Text="Alkali metals" />
                        <DxTreeViewNode Text="Alkaline earth metals" />
                        <DxTreeViewNode Text="Inner transition elements">
                            <Nodes>
                                <DxTreeViewNode Text="Lanthanides" />
                                <DxTreeViewNode Text="Actinides" />
                            </Nodes>
                        </DxTreeViewNode>
                        <DxTreeViewNode Text="Transition elements" />
                        <DxTreeViewNode Text="Other metals" />
                    </Nodes>
                </DxTreeViewNode>
                <DxTreeViewNode Text="Metalloids" />
                <DxTreeViewNode Text="Nonmetals">
                    <Nodes>
                        <DxTreeViewNode Text="Halogens" />
                        <DxTreeViewNode Text="Noble gases" />
                        <DxTreeViewNode Text="Other nonmetals" />
                    </Nodes>
                </DxTreeViewNode>
            </Nodes>
        </DxTreeView>



        @if (SourceTypes != null)
        {
            <DxTreeView AllowSelectNodes="true"
                        Data="@GetParentNodes()"
                        SelectionChanged="@SelectionChanged"
                        TextExpression=@(dataItem => GetNodeText(dataItem))
                        ChildrenExpression=@(dataItem => GetNodeChildren(dataItem))>
            </DxTreeView>
        }*@

    </div>
</div>

@functions
{

    string location = "London";
    string Location { get => location; set { location = value; OnChanged(); } }

    DateTime checkIn = DateTime.Now;
    DateTime CheckIn { get => checkIn; set { checkIn = value; OnChanged(); } }

    DateTime checkOut = DateTime.Now;
    DateTime CheckOut { get => checkOut; set { checkOut = value; OnChanged(); } }


    void OnChanged() { InvokeAsync(StateHasChanged); }

    protected SourceMaterialTypeLookupItem[] SourceTypes { get; set; }

    IEnumerable GetParentNodes()
    {
        return SourceTypes.Where(s => s.ParentId.IsNullOrEmpty());
    }

    IEnumerable GetNodeChildren(object dataItem)
    {
        if (dataItem is SourceMaterialTypeLookupItem lookupItem)
        {
            return SourceTypes.Where(s => s.ParentId == lookupItem.Id);
        }


        return null;
    }

    string GetNodeText(object dataItem)
    {
        if (dataItem is SourceMaterialTypeLookupItem lookupItem)
        {
            return lookupItem.Name;
        }
        return "";
    }

    string SelectedGroup = "none";

    protected void SelectionChanged(TreeViewNodeEventArgs e)
    {
        SelectedGroup = e.NodeInfo.Text;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        SourceTypes = await ApiService.GetSourceMaterialTypesLookup(Http, SourceMaterialTypeLookupParameter.Source);
    }

}