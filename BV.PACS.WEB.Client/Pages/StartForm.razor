@inject HttpClient Http
@inject LookupService ApiService
@using System.Collections
@using BV.PACS.WEB.Client.Services.Api
@using BV.PACS.WEB.Shared.Models
@using BV.PACS.WEB.Shared.Models.Parameters
@using BV.PACS.WEB.Shared.Utils
@inherits BV.PACS.WEB.Client.Shared.Base.TranslatablePanel<BV.PACS.WEB.Client.I18nText.StartForm>
<h1>@Translations.Caption</h1>

<div class="row alert alert-primary background-white">
    <div class="col-sm-12">

        <span class="oi oi-pencil mr-2" aria-hidden="true"></span>
        <DxTreeView AllowSelectNodes="true" 
                    SelectionChanged=@SelectionChanged>
            <Nodes>
                <DxTreeViewNode Text="Metals">
                    <Nodes>
                        <DxTreeViewNode Text="Alkali metals" />
                        <DxTreeViewNode Text="Alkaline earth metals" />
                        <DxTreeViewNode Text="Inner transition elements">
                            <Nodes>
                                <DxTreeViewNode Text="Lanthanides" />
                                <DxTreeViewNode Text="Actinides" />
                            </Nodes>
                        </DxTreeViewNode>
                        <DxTreeViewNode Text="Transition elements" />
                        <DxTreeViewNode Text="Other metals" />
                    </Nodes>
                </DxTreeViewNode>
                <DxTreeViewNode Text="Metalloids" />
                <DxTreeViewNode Text="Nonmetals">
                    <Nodes>
                        <DxTreeViewNode Text="Halogens" />
                        <DxTreeViewNode Text="Noble gases" />
                        <DxTreeViewNode Text="Other nonmetals" />
                    </Nodes>
                </DxTreeViewNode>
            </Nodes>
        </DxTreeView>



        @if (SourceTypes != null)
        {
            <DxTreeView AllowSelectNodes="true" 
                        Data="@GetParentNodes()"
                        SelectionChanged="@SelectionChanged"
                        TextExpression=@(dataItem => GetNodeText(dataItem))
                        ChildrenExpression=@(dataItem => GetNodeChildren(dataItem))>
            </DxTreeView>
        }

    </div>
</div>

@functions
{
    protected SourceMaterialTypeLookupItem[] SourceTypes { get; set; }

    IEnumerable GetParentNodes()
    {
        return SourceTypes.Where(s => s.ParentId.IsNullOrEmpty());
    }

    IEnumerable GetNodeChildren(object dataItem)
    {
        if (dataItem is SourceMaterialTypeLookupItem lookupItem)
        {
            return SourceTypes.Where(s => s.ParentId == lookupItem.Id);
        }


        return null;
    }

    string GetNodeText(object dataItem)
    {
        if (dataItem is SourceMaterialTypeLookupItem lookupItem)
        {
            return lookupItem.Name;
        }
        return "";
    }

    string SelectedGroup = "none";

    protected void SelectionChanged(TreeViewNodeEventArgs e)
    {
        SelectedGroup = e.NodeInfo.Text;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        SourceTypes = await ApiService.GetSourceMaterialTypesLookup(Http, SourceMaterialTypeLookupParameter.Source);
    }

}