@using System.Net
@using BV.PACS.WEB.Client.Pages
@using BV.PACS.WEB.Client.Services.Api
@using BV.PACS.WEB.Client.Shared.Components
@using BV.PACS.WEB.Shared.Models
@using BV.PACS.WEB.Shared.Models.Parameters
@using BV.PACS.WEB.Shared.Utils
@using Microsoft.AspNetCore.Components
@inject System.Net.Http.HttpClient  Http
@inject LookupService ApiService
@inherits BV.PACS.WEB.Client.Shared.Base.TranslatablePanel<BV.PACS.WEB.Client.I18nText.StartForm>
<h1>@Translations.Caption</h1>

<div class="row alert alert-primary background-white">
    <div class="col-sm-12">

        <span class="oi oi-pencil mr-2" aria-hidden="true"></span>

        @if (SourceTypes != null)
        {
            <DxTreeView Data="@SourceTypes"
                        TextExpression=@(dataItem => GetNodeText(dataItem))
                        ChildrenExpression=@(dataItem => GetNodeChildren(dataItem))>
            </DxTreeView>
        }

    </div>
</div>
@functions
{
    protected SourceMaterialTypeLookupItem[] SourceTypes { get; set; }

    System.Collections.IEnumerable GetParentNodes()
    {
        return SourceTypes.Where(s => s.IsNullOrEmpty());
    }

    System.Collections.IEnumerable GetNodeChildren(object dataItem) {
        //if (dataItem is ProductCategoryMain) {
        //    return productSubcategories
        //        .Where(c => c.Category.Equals((ProductCategoryMain)dataItem));
        //}
        //else if (dataItem is ProductCategory) {
        //    return products
        //        .Where(p => p.ProductCategoryId == ((ProductCategory)dataItem).ProductSubcategoryID);
        //}
        return null;
    }

    string GetNodeText(object dataItem) {
        //if (dataItem is ProductCategoryMain) {
        //    return dataItem.ToString();
        //}
        //else if (dataItem is ProductCategory) {
        //    return ((ProductCategory)dataItem).Subcategory;
        //}
        //else if (dataItem is Product) {
        //    return ((Product)dataItem).ProductName;
        //}
        if (dataItem is SourceMaterialTypeLookupItem lookupItem)
        {
            return lookupItem.Name;
        }
        return "";
    }

    protected override async Task OnInitAsync()
    {
        await base.OnInitAsync();
        SourceTypes = await ApiService.GetSourceMaterialTypesLookup(Http, SourceMaterialTypeLookupParameter.Source);
    }

}
