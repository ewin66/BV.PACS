@using BV.PACS.Shared.Models
@using BV.PACS.Shared.Models.Parameters
@using BV.PACS.Shared.Utils
@using Microsoft.AspNetCore.Components
@inject HttpClient _http

<DxFormLayout CaptionPosition="@CaptionPosition.Vertical">
    <DxFormLayoutItem Caption="@nameof(SourceListItem.SourceBarcode)" ColSpanLg="12" ColSpanMd="12">
        <Template>
            <DxTextBox bind-Text="@SourceBarcode"></DxTextBox>
        </Template>
    </DxFormLayoutItem>

    <DxFormLayoutItem Caption="@nameof(SourceListItem.SourceCreationDate)" ColSpanLg="12" ColSpanMd="12">
        <Template>
            <DxDateEdit bind-Date="@StartSourceCreationDate"></DxDateEdit>
        </Template>
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="@nameof(SourceListItem.SourceCreationDate)" ColSpanLg="12" ColSpanMd="12">
        <Template>
            <DxDateEdit bind-Date="@EndSourceCreationDate"></DxDateEdit>
        </Template>
    </DxFormLayoutItem>

    <DxFormLayoutItem Caption="@nameof(SourceListItem.SourceTemplateName)" ColSpanLg="12" ColSpanMd="12">
        <Template>

            <DxComboBox Data="@_sourceTemplates"
                        TextFieldName="Name"
                        NullText="Select Template ..."
                        bind-SelectedItem="@SourceTemplate">
            </DxComboBox>

        </Template>
    </DxFormLayoutItem>

    <DxFormLayoutItem Caption="@nameof(SourceListItem.SourceNote)" ColSpanLg="12" ColSpanMd="12">
        <Template>
            <DxTextBox bind-Text="@SourceNotes"></DxTextBox>
        </Template>
    </DxFormLayoutItem>

    <DxFormLayoutItem Caption="@nameof(SourceListItem.MaterialBarcodes)" ColSpanLg="12" ColSpanMd="12">
        <Template>
            <DxTextBox bind-Text="@MaterialBarcode"></DxTextBox>
        </Template>
    </DxFormLayoutItem>

    <DxFormLayoutItem Caption="@nameof(SourceListItem.AliquotBarcodes)" ColSpanLg="12" ColSpanMd="12">
        <Template>
            <DxTextBox bind-Text="@AliquotBarcode"></DxTextBox>
        </Template>
    </DxFormLayoutItem>

    <DxFormLayoutItem Caption="@nameof(SourceListItem.TestStatuses)" ColSpanLg="12" ColSpanMd="12">
        <Template>
            <DxComboBox Data="@_testStatuses"
                        TextFieldName="Name"
                        bind-SelectedItem="@TestStatus">
            </DxComboBox>
        </Template>
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="@nameof(SourceListItem.TestTypes)" ColSpanLg="12" ColSpanMd="12">
        <Template>
            <DxComboBox Data="@_testTypes"
                        TextFieldName="Name"
                        bind-SelectedItem="@TestType">
            </DxComboBox>
        </Template>
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="@nameof(SourceListItem.TestResults)" ColSpanLg="12" ColSpanMd="12">
        <Template>
            <DxComboBox Data="@_testResults"
                        TextFieldName="Name"
                        bind-SelectedItem="@TestResult">
            </DxComboBox>
        </Template>
    </DxFormLayoutItem>

    <DxFormLayoutItem ColSpanLg="12" ColSpanMd="12">
        <Template>
            <button onclick="@DoSearch" class="btn btn-primary">Search</button>
        </Template>
    </DxFormLayoutItem>
</DxFormLayout>

@functions {

    [Parameter]
    public Action<AggregatedConditionDto> OnSearch { get; set; }

    private TemplateListItem[] _sourceTemplates;
    private LookupListItem[] _testStatuses;

    private LookupListItem[] _testTypes;
    private LookupListItem[] _testResults;

    private DateTime StartSourceCreationDate { get; set; }
    private DateTime EndSourceCreationDate { get; set; }

    private string SourceBarcode { get; set; }

    private TemplateListItem SourceTemplate { get; set; }

    private string SourceNotes { get; set; }

    private string MaterialBarcode { get; set; }

    private string AliquotBarcode { get; set; }

    LookupListItem TestStatus { get; set; }
    LookupListItem TestType { get; set; }
    LookupListItem TestResult { get; set; }

    protected override async Task OnInitAsync()
    {
        StartSourceCreationDate = DateTime.Now.Date.AddYears(-1);
        EndSourceCreationDate = DateTime.Now.Date;
        _sourceTemplates = await _http.PostJsonAsync<TemplateListItem[]>("api/Lookup/GetSourceTemplates", GlobalSettings.CurrentLanguage);
        _testStatuses = await _http.PostJsonAsync<LookupListItem[]>("api/Lookup/GetLookup", new LookupParameter(BaseLookupTables.rftTestStatus, GlobalSettings.CurrentLanguage));
        _testTypes = await _http.PostJsonAsync<LookupListItem[]>("api/Lookup/GetLookup", new LookupParameter(BaseLookupTables.rftTestType, GlobalSettings.CurrentLanguage));
        _testResults = await _http.PostJsonAsync<LookupListItem[]>("api/Lookup/GetLookup", new LookupParameter(BaseLookupTables.rftTestResult, GlobalSettings.CurrentLanguage));
    }


    private void DoSearch()
    {
        var cond = new AggregatedConditionDto();

        cond.AddStandardConditionIfNotEmpty("strSourceBarcode", "SourceBarcode", SourceBarcode, Operators.LikeOperator);

        var creationDateStartText = StartSourceCreationDate.Date.ToString(GlobalSettings.AnsiDateTimeFormatInfo);
        cond.AddStandardConditionIfNotEmpty("datCreationDate", "CreationDate", creationDateStartText, Operators.MoreOperator);

        var creationDateEndText = EndSourceCreationDate.Date.ToString(GlobalSettings.AnsiDateTimeFormatInfo);
        cond.AddStandardConditionIfNotEmpty("datCreationDate", "CreationDate", creationDateEndText, Operators.LessOperator);

        cond.AddStandardConditionIfNotEmpty("idfsCFormTemplateID", "Template", SourceTemplate?.Id, Operators.EqualsOperator);

        cond.AddStandardConditionIfNotEmpty("strNote", "Notes", SourceNotes, Operators.LikeOperator);

        cond.AddStandardConditionIfNotEmpty("strMaterialBarcode", "MaterialBarcode", MaterialBarcode, Operators.LikeOperator);

        cond.AddStandardConditionIfNotEmpty("strContainerBarcode", "AliquotBarcode", AliquotBarcode, Operators.LikeOperator);

        cond.AddStandardConditionIfNotEmpty("idfsTestStatus", "TestStatus", TestStatus?.Id, Operators.EqualsOperator);
        cond.AddStandardConditionIfNotEmpty("idfsTestTypeId", "TestType", TestType?.Id, Operators.EqualsOperator);
        cond.AddStandardConditionIfNotEmpty("idfsTestResultId", "TestResult", TestResult?.Id, Operators.EqualsOperator);


        OnSearch?.Invoke(cond);
    }

}